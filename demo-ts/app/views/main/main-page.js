"use strict";
/*
In NativeScript, a file with the same name as an XML file is known as
a code-behind file. The code-behind is a great place to place your view
logic, and to set up your page’s data binding.
*/
Object.defineProperty(exports, "__esModule", { value: true });
var frames = require("ui/frame");
var main_view_model_1 = require("../../view_models/main/main-view-model");
// To import the "ui/frame" module:
var context;
// Event handler for Page "navigatingTo" event attached in main-page.xml
function navigatingTo(args) {
    console.log("navigatingTo main-page");
    /*
    This gets a reference this page’s <Page> UI component. You can
    view the API reference of the Page to see what’s available at
    https://docs.nativescript.org/api-reference/classes/_ui_page_.page.html
    */
    var page = args.object;
    /*
    A page’s bindingContext is an object that should be used to perform
    data binding between XML markup and TypeScript code. Properties
    on the bindingContext can be accessed using the {{ }} syntax in XML.
    In this example, the {{ message }} and {{ onTap }} bindings are resolved
    against the object returned by createViewModel().

    You can learn more about data binding in NativeScript at
    https://docs.nativescript.org/core-concepts/data-binding.
    */
    // page.bindingContext = new MainModel();
    if (!context) {
        context = new main_view_model_1.MainModel();
        console.log("初始化 context");
        page.bindingContext = context;
    }
}
exports.navigatingTo = navigatingTo;
// Event handler for Page "loaded" event attached in main-page.xml
function pageLoaded(args) {
    // Get the event sender
    var page = args.object;
    console.log("pageLoaded main-page");
}
exports.pageLoaded = pageLoaded;
function buttonTap(args) {
    context.onTap();
}
exports.buttonTap = buttonTap;
function frameButtonTap(args) {
    // Get the event sender
    console.log("frameButtonTap");
    var dataItem = args.object;
    console.log("framename: " + dataItem.framename);
    // console.log(" dataItem: " + JSON.stringify(dataItem));
    // Navigate to page
    frames.topmost().navigate("views/" + dataItem.framename + "/" + dataItem.framename + "-page");
}
exports.frameButtonTap = frameButtonTap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztFQUlFOztBQUdGLGlDQUFtQztBQUluQywwRUFBbUU7QUFDbkUsbUNBQW1DO0FBRW5DLElBQUksT0FBTyxDQUFDO0FBRVosd0VBQXdFO0FBQ3hFLHNCQUE2QixJQUFlO0lBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUV0Qzs7OztNQUlFO0lBQ0YsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQWMsQ0FBQztJQUVqQzs7Ozs7Ozs7O01BU0U7SUFDRix5Q0FBeUM7SUFDekMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxHQUFHLElBQUksMkJBQVMsRUFBRSxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7SUFDbEMsQ0FBQztBQUNMLENBQUM7QUExQkQsb0NBMEJDO0FBRUQsa0VBQWtFO0FBQ2xFLG9CQUEyQixJQUFlO0lBQ3RDLHVCQUF1QjtJQUN2QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBYyxDQUFDO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBSkQsZ0NBSUM7QUFFRCxtQkFBMEIsSUFBc0I7SUFDNUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3BCLENBQUM7QUFGRCw4QkFFQztBQUVELHdCQUErQixJQUFJO0lBQy9CLHVCQUF1QjtJQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDOUIsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEQseURBQXlEO0lBRXpELG1CQUFtQjtJQUNuQixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDO0FBQ2xHLENBQUM7QUFURCx3Q0FTQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5JbiBOYXRpdmVTY3JpcHQsIGEgZmlsZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgYW4gWE1MIGZpbGUgaXMga25vd24gYXNcbmEgY29kZS1iZWhpbmQgZmlsZS4gVGhlIGNvZGUtYmVoaW5kIGlzIGEgZ3JlYXQgcGxhY2UgdG8gcGxhY2UgeW91ciB2aWV3XG5sb2dpYywgYW5kIHRvIHNldCB1cCB5b3VyIHBhZ2XigJlzIGRhdGEgYmluZGluZy5cbiovXG5cbmltcG9ydCB7IEV2ZW50RGF0YSwgT2JzZXJ2YWJsZSB9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCAqIGFzIGZyYW1lcyBmcm9tIFwidWkvZnJhbWVcIjtcbmltcG9ydCB7IEdlc3R1cmVFdmVudERhdGEgfSBmcm9tIFwidWkvZ2VzdHVyZXNcIjtcbi8vIGltcG9ydCB7IFZpZXcgfSBmcm9tIFwidWkvY29yZS92aWV3XCJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidWkvcGFnZVwiO1xuaW1wb3J0IHsgTWFpbk1vZGVsIH0gZnJvbSBcIi4uLy4uL3ZpZXdfbW9kZWxzL21haW4vbWFpbi12aWV3LW1vZGVsXCI7XG4vLyBUbyBpbXBvcnQgdGhlIFwidWkvZnJhbWVcIiBtb2R1bGU6XG5cbmxldCBjb250ZXh0O1xuXG4vLyBFdmVudCBoYW5kbGVyIGZvciBQYWdlIFwibmF2aWdhdGluZ1RvXCIgZXZlbnQgYXR0YWNoZWQgaW4gbWFpbi1wYWdlLnhtbFxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRpbmdUbyhhcmdzOiBFdmVudERhdGEpIHtcbiAgICBjb25zb2xlLmxvZyhcIm5hdmlnYXRpbmdUbyBtYWluLXBhZ2VcIik7XG5cbiAgICAvKlxuICAgIFRoaXMgZ2V0cyBhIHJlZmVyZW5jZSB0aGlzIHBhZ2XigJlzIDxQYWdlPiBVSSBjb21wb25lbnQuIFlvdSBjYW5cbiAgICB2aWV3IHRoZSBBUEkgcmVmZXJlbmNlIG9mIHRoZSBQYWdlIHRvIHNlZSB3aGF04oCZcyBhdmFpbGFibGUgYXRcbiAgICBodHRwczovL2RvY3MubmF0aXZlc2NyaXB0Lm9yZy9hcGktcmVmZXJlbmNlL2NsYXNzZXMvX3VpX3BhZ2VfLnBhZ2UuaHRtbFxuICAgICovXG4gICAgY29uc3QgcGFnZSA9IGFyZ3Mub2JqZWN0IGFzIFBhZ2U7XG5cbiAgICAvKlxuICAgIEEgcGFnZeKAmXMgYmluZGluZ0NvbnRleHQgaXMgYW4gb2JqZWN0IHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcGVyZm9ybVxuICAgIGRhdGEgYmluZGluZyBiZXR3ZWVuIFhNTCBtYXJrdXAgYW5kIFR5cGVTY3JpcHQgY29kZS4gUHJvcGVydGllc1xuICAgIG9uIHRoZSBiaW5kaW5nQ29udGV4dCBjYW4gYmUgYWNjZXNzZWQgdXNpbmcgdGhlIHt7IH19IHN5bnRheCBpbiBYTUwuXG4gICAgSW4gdGhpcyBleGFtcGxlLCB0aGUge3sgbWVzc2FnZSB9fSBhbmQge3sgb25UYXAgfX0gYmluZGluZ3MgYXJlIHJlc29sdmVkXG4gICAgYWdhaW5zdCB0aGUgb2JqZWN0IHJldHVybmVkIGJ5IGNyZWF0ZVZpZXdNb2RlbCgpLlxuXG4gICAgWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGRhdGEgYmluZGluZyBpbiBOYXRpdmVTY3JpcHQgYXRcbiAgICBodHRwczovL2RvY3MubmF0aXZlc2NyaXB0Lm9yZy9jb3JlLWNvbmNlcHRzL2RhdGEtYmluZGluZy5cbiAgICAqL1xuICAgIC8vIHBhZ2UuYmluZGluZ0NvbnRleHQgPSBuZXcgTWFpbk1vZGVsKCk7XG4gICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgTWFpbk1vZGVsKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwi5Yid5aeL5YyWIGNvbnRleHRcIik7XG4gICAgICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbn1cblxuLy8gRXZlbnQgaGFuZGxlciBmb3IgUGFnZSBcImxvYWRlZFwiIGV2ZW50IGF0dGFjaGVkIGluIG1haW4tcGFnZS54bWxcbmV4cG9ydCBmdW5jdGlvbiBwYWdlTG9hZGVkKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIC8vIEdldCB0aGUgZXZlbnQgc2VuZGVyXG4gICAgY29uc3QgcGFnZSA9IGFyZ3Mub2JqZWN0IGFzIFBhZ2U7XG4gICAgY29uc29sZS5sb2coXCJwYWdlTG9hZGVkIG1haW4tcGFnZVwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1dHRvblRhcChhcmdzOiBHZXN0dXJlRXZlbnREYXRhKSB7XG4gICAgY29udGV4dC5vblRhcCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJhbWVCdXR0b25UYXAoYXJncykge1xuICAgIC8vIEdldCB0aGUgZXZlbnQgc2VuZGVyXG4gICAgY29uc29sZS5sb2coXCJmcmFtZUJ1dHRvblRhcFwiKTtcbiAgICBjb25zdCBkYXRhSXRlbSA9IGFyZ3Mub2JqZWN0O1xuICAgIGNvbnNvbGUubG9nKFwiZnJhbWVuYW1lOiBcIiArIGRhdGFJdGVtLmZyYW1lbmFtZSk7XG4gICAgLy8gY29uc29sZS5sb2coXCIgZGF0YUl0ZW06IFwiICsgSlNPTi5zdHJpbmdpZnkoZGF0YUl0ZW0pKTtcblxuICAgIC8vIE5hdmlnYXRlIHRvIHBhZ2VcbiAgICBmcmFtZXMudG9wbW9zdCgpLm5hdmlnYXRlKFwidmlld3MvXCIgKyBkYXRhSXRlbS5mcmFtZW5hbWUgKyBcIi9cIiArIGRhdGFJdGVtLmZyYW1lbmFtZSArIFwiLXBhZ2VcIik7XG59Il19