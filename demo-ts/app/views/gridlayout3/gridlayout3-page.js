"use strict";
/*
In NativeScript, a file with the same name as an XML file is known as
a code-behind file. The code-behind is a great place to place your view
logic, and to set up your page’s data binding.
*/
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("color");
var button_1 = require("ui/button");
var label_1 = require("ui/label");
var grid_layout_1 = require("ui/layouts/grid-layout");
var view = require("ui/core/view");
// Event handler for Page "navigatingTo" event attached in main-page.xml
function navigatingTo(args) {
    /*
    This gets a reference this page’s <Page> UI component. You can
    view the API reference of the Page to see what’s available at
    https://docs.nativescript.org/api-reference/classes/_ui_page_.page.html
    */
    var page = args.object;
}
exports.navigatingTo = navigatingTo;
// Event handler for Page "loaded" event attached in main-page.xml
function pageLoaded(args) {
    // Grid wrapper
    var grid = new grid_layout_1.GridLayout();
    // Create title Label and add is as a child to our grid
    var titleLabel = new label_1.Label();
    titleLabel.text = "NativeScript";
    grid.addChild(titleLabel);
    // Create info Label and add is as a child to our grid
    var infoLabel = new label_1.Label();
    infoLabel.text = "Truly native mobile apps";
    infoLabel.backgroundColor = new color_1.Color("gray");
    grid.addChild(infoLabel);
    // Create the share button and add is as a child to our grid
    var shareButton = new button_1.Button();
    shareButton.text = "Share This!";
    grid.addChild(shareButton);
    // Add Grid Rows as if rows="*, 100, auto" cols="250, *"
    // * - occupy the remaining available space
    grid.addRow(new grid_layout_1.ItemSpec(1, grid_layout_1.GridUnitType.STAR));
    // 100 - fixed column width.
    // If elements in this columns wants to be more - we will coerce their width to the column width.
    grid.addRow(new grid_layout_1.ItemSpec(100, grid_layout_1.GridUnitType.PIXEL));
    // auto - the column width will be the width of the widest element in that column.
    grid.addRow(new grid_layout_1.ItemSpec(1, grid_layout_1.GridUnitType.AUTO));
    grid.addColumn(new grid_layout_1.ItemSpec(250, grid_layout_1.GridUnitType.PIXEL));
    grid.addColumn(new grid_layout_1.ItemSpec(1, grid_layout_1.GridUnitType.STAR));
    // Assign views to their row (if not set default row is 0)
    grid_layout_1.GridLayout.setRow(titleLabel, 0); // titleLabel set to row 0
    grid_layout_1.GridLayout.setRow(infoLabel, 1); // infoLabel set to row 1
    grid_layout_1.GridLayout.setRow(shareButton, 2); // shareButton set to row 2
    // Assign views to their col (if not set default column is 0)
    grid_layout_1.GridLayout.setColumn(titleLabel, 0); // titleLabel set to column 0
    grid_layout_1.GridLayout.setColumn(infoLabel, 0); // infoLabel set to column 0
    grid_layout_1.GridLayout.setColumn(shareButton, 1); // shareButton set to column 1
    // Assign ColumnSpan for views
    grid_layout_1.GridLayout.setColumnSpan(infoLabel, 2); // infoLabel set with columnSpan = 2
    var page = args.object;
    var stackLayout = view.getViewById(page, "stackLayout1");
    stackLayout.addChild(grid);
    //    page.content = grid;
}
exports.pageLoaded = pageLoaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZGxheW91dDMtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdyaWRsYXlvdXQzLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0VBSUU7O0FBRUYsK0JBQThCO0FBRTlCLG9DQUFtQztBQUNuQyxrQ0FBaUM7QUFDakMsc0RBQTRFO0FBRTVFLG1DQUFxQztBQUdyQyx3RUFBd0U7QUFDeEUsc0JBQTZCLElBQWU7SUFDeEM7Ozs7TUFJRTtJQUNGLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7QUFFakMsQ0FBQztBQVJELG9DQVFDO0FBRUQsa0VBQWtFO0FBQ2xFLG9CQUEyQixJQUFlO0lBQ3ZDLGVBQWU7SUFDZixJQUFNLElBQUksR0FBRyxJQUFJLHdCQUFVLEVBQUUsQ0FBQztJQUU5Qix1REFBdUQ7SUFDdkQsSUFBTSxVQUFVLEdBQUcsSUFBSSxhQUFLLEVBQUUsQ0FBQztJQUMvQixVQUFVLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztJQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRTFCLHNEQUFzRDtJQUN0RCxJQUFNLFNBQVMsR0FBRyxJQUFJLGFBQUssRUFBRSxDQUFDO0lBQzlCLFNBQVMsQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLENBQUM7SUFDNUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxJQUFJLGFBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXpCLDREQUE0RDtJQUM1RCxJQUFNLFdBQVcsR0FBRyxJQUFJLGVBQU0sRUFBRSxDQUFDO0lBQ2pDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDO0lBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFM0Isd0RBQXdEO0lBRXhELDJDQUEyQztJQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksc0JBQVEsQ0FBQyxDQUFDLEVBQUUsMEJBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRWhELDRCQUE0QjtJQUM1QixpR0FBaUc7SUFDakcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLHNCQUFRLENBQUMsR0FBRyxFQUFFLDBCQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUVuRCxrRkFBa0Y7SUFDbEYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLHNCQUFRLENBQUMsQ0FBQyxFQUFFLDBCQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVoRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksc0JBQVEsQ0FBQyxHQUFHLEVBQUUsMEJBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxzQkFBUSxDQUFDLENBQUMsRUFBRSwwQkFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFbkQsMERBQTBEO0lBQzFELHdCQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLDBCQUEwQjtJQUM1RCx3QkFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBRSx5QkFBeUI7SUFDM0Qsd0JBQVUsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0lBRTlELDZEQUE2RDtJQUM3RCx3QkFBVSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7SUFDbEUsd0JBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUUsNEJBQTRCO0lBQ2pFLHdCQUFVLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLDhCQUE4QjtJQUVwRSw4QkFBOEI7SUFDOUIsd0JBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsb0NBQW9DO0lBRTVFLElBQU0sSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDL0IsSUFBTSxXQUFXLEdBQWdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3hFLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsMEJBQTBCO0FBQzFCLENBQUM7QUFwREQsZ0NBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkluIE5hdGl2ZVNjcmlwdCwgYSBmaWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBhbiBYTUwgZmlsZSBpcyBrbm93biBhc1xuYSBjb2RlLWJlaGluZCBmaWxlLiBUaGUgY29kZS1iZWhpbmQgaXMgYSBncmVhdCBwbGFjZSB0byBwbGFjZSB5b3VyIHZpZXdcbmxvZ2ljLCBhbmQgdG8gc2V0IHVwIHlvdXIgcGFnZeKAmXMgZGF0YSBiaW5kaW5nLlxuKi9cblxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwiY29sb3JcIjtcbmltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJ1aS9idXR0b25cIjtcbmltcG9ydCB7IExhYmVsIH0gZnJvbSBcInVpL2xhYmVsXCI7XG5pbXBvcnQgeyBHcmlkTGF5b3V0LCBHcmlkVW5pdFR5cGUsIEl0ZW1TcGVjIH0gZnJvbSBcInVpL2xheW91dHMvZ3JpZC1sYXlvdXRcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidWkvcGFnZVwiO1xuaW1wb3J0ICogYXMgdmlldyBmcm9tICd1aS9jb3JlL3ZpZXcnO1xuaW1wb3J0IHsgU3RhY2tMYXlvdXQgfSBmcm9tIFwidWkvbGF5b3V0cy9zdGFjay1sYXlvdXRcIjtcblxuLy8gRXZlbnQgaGFuZGxlciBmb3IgUGFnZSBcIm5hdmlnYXRpbmdUb1wiIGV2ZW50IGF0dGFjaGVkIGluIG1haW4tcGFnZS54bWxcbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0aW5nVG8oYXJnczogRXZlbnREYXRhKSB7XG4gICAgLypcbiAgICBUaGlzIGdldHMgYSByZWZlcmVuY2UgdGhpcyBwYWdl4oCZcyA8UGFnZT4gVUkgY29tcG9uZW50LiBZb3UgY2FuXG4gICAgdmlldyB0aGUgQVBJIHJlZmVyZW5jZSBvZiB0aGUgUGFnZSB0byBzZWUgd2hhdOKAmXMgYXZhaWxhYmxlIGF0XG4gICAgaHR0cHM6Ly9kb2NzLm5hdGl2ZXNjcmlwdC5vcmcvYXBpLXJlZmVyZW5jZS9jbGFzc2VzL191aV9wYWdlXy5wYWdlLmh0bWxcbiAgICAqL1xuICAgIGxldCBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgXG59XG5cbi8vIEV2ZW50IGhhbmRsZXIgZm9yIFBhZ2UgXCJsb2FkZWRcIiBldmVudCBhdHRhY2hlZCBpbiBtYWluLXBhZ2UueG1sXG5leHBvcnQgZnVuY3Rpb24gcGFnZUxvYWRlZChhcmdzOiBFdmVudERhdGEpIHtcbiAgIC8vIEdyaWQgd3JhcHBlclxuICAgY29uc3QgZ3JpZCA9IG5ldyBHcmlkTGF5b3V0KCk7XG5cbiAgIC8vIENyZWF0ZSB0aXRsZSBMYWJlbCBhbmQgYWRkIGlzIGFzIGEgY2hpbGQgdG8gb3VyIGdyaWRcbiAgIGNvbnN0IHRpdGxlTGFiZWwgPSBuZXcgTGFiZWwoKTtcbiAgIHRpdGxlTGFiZWwudGV4dCA9IFwiTmF0aXZlU2NyaXB0XCI7XG4gICBncmlkLmFkZENoaWxkKHRpdGxlTGFiZWwpO1xuXG4gICAvLyBDcmVhdGUgaW5mbyBMYWJlbCBhbmQgYWRkIGlzIGFzIGEgY2hpbGQgdG8gb3VyIGdyaWRcbiAgIGNvbnN0IGluZm9MYWJlbCA9IG5ldyBMYWJlbCgpO1xuICAgaW5mb0xhYmVsLnRleHQgPSBcIlRydWx5IG5hdGl2ZSBtb2JpbGUgYXBwc1wiO1xuICAgaW5mb0xhYmVsLmJhY2tncm91bmRDb2xvciA9IG5ldyBDb2xvcihcImdyYXlcIik7XG4gICBncmlkLmFkZENoaWxkKGluZm9MYWJlbCk7XG5cbiAgIC8vIENyZWF0ZSB0aGUgc2hhcmUgYnV0dG9uIGFuZCBhZGQgaXMgYXMgYSBjaGlsZCB0byBvdXIgZ3JpZFxuICAgY29uc3Qgc2hhcmVCdXR0b24gPSBuZXcgQnV0dG9uKCk7XG4gICBzaGFyZUJ1dHRvbi50ZXh0ID0gXCJTaGFyZSBUaGlzIVwiO1xuICAgZ3JpZC5hZGRDaGlsZChzaGFyZUJ1dHRvbik7XG5cbiAgIC8vIEFkZCBHcmlkIFJvd3MgYXMgaWYgcm93cz1cIiosIDEwMCwgYXV0b1wiIGNvbHM9XCIyNTAsICpcIlxuXG4gICAvLyAqIC0gb2NjdXB5IHRoZSByZW1haW5pbmcgYXZhaWxhYmxlIHNwYWNlXG4gICBncmlkLmFkZFJvdyhuZXcgSXRlbVNwZWMoMSwgR3JpZFVuaXRUeXBlLlNUQVIpKTtcblxuICAgLy8gMTAwIC0gZml4ZWQgY29sdW1uIHdpZHRoLlxuICAgLy8gSWYgZWxlbWVudHMgaW4gdGhpcyBjb2x1bW5zIHdhbnRzIHRvIGJlIG1vcmUgLSB3ZSB3aWxsIGNvZXJjZSB0aGVpciB3aWR0aCB0byB0aGUgY29sdW1uIHdpZHRoLlxuICAgZ3JpZC5hZGRSb3cobmV3IEl0ZW1TcGVjKDEwMCwgR3JpZFVuaXRUeXBlLlBJWEVMKSk7XG5cbiAgIC8vIGF1dG8gLSB0aGUgY29sdW1uIHdpZHRoIHdpbGwgYmUgdGhlIHdpZHRoIG9mIHRoZSB3aWRlc3QgZWxlbWVudCBpbiB0aGF0IGNvbHVtbi5cbiAgIGdyaWQuYWRkUm93KG5ldyBJdGVtU3BlYygxLCBHcmlkVW5pdFR5cGUuQVVUTykpO1xuXG4gICBncmlkLmFkZENvbHVtbihuZXcgSXRlbVNwZWMoMjUwLCBHcmlkVW5pdFR5cGUuUElYRUwpKTtcbiAgIGdyaWQuYWRkQ29sdW1uKG5ldyBJdGVtU3BlYygxLCBHcmlkVW5pdFR5cGUuU1RBUikpO1xuXG4gICAvLyBBc3NpZ24gdmlld3MgdG8gdGhlaXIgcm93IChpZiBub3Qgc2V0IGRlZmF1bHQgcm93IGlzIDApXG4gICBHcmlkTGF5b3V0LnNldFJvdyh0aXRsZUxhYmVsLCAwKTsgLy8gdGl0bGVMYWJlbCBzZXQgdG8gcm93IDBcbiAgIEdyaWRMYXlvdXQuc2V0Um93KGluZm9MYWJlbCwgMSk7ICAvLyBpbmZvTGFiZWwgc2V0IHRvIHJvdyAxXG4gICBHcmlkTGF5b3V0LnNldFJvdyhzaGFyZUJ1dHRvbiwgMik7IC8vIHNoYXJlQnV0dG9uIHNldCB0byByb3cgMlxuXG4gICAvLyBBc3NpZ24gdmlld3MgdG8gdGhlaXIgY29sIChpZiBub3Qgc2V0IGRlZmF1bHQgY29sdW1uIGlzIDApXG4gICBHcmlkTGF5b3V0LnNldENvbHVtbih0aXRsZUxhYmVsLCAwKTsgLy8gdGl0bGVMYWJlbCBzZXQgdG8gY29sdW1uIDBcbiAgIEdyaWRMYXlvdXQuc2V0Q29sdW1uKGluZm9MYWJlbCwgMCk7ICAvLyBpbmZvTGFiZWwgc2V0IHRvIGNvbHVtbiAwXG4gICBHcmlkTGF5b3V0LnNldENvbHVtbihzaGFyZUJ1dHRvbiwgMSk7IC8vIHNoYXJlQnV0dG9uIHNldCB0byBjb2x1bW4gMVxuXG4gICAvLyBBc3NpZ24gQ29sdW1uU3BhbiBmb3Igdmlld3NcbiAgIEdyaWRMYXlvdXQuc2V0Q29sdW1uU3BhbihpbmZvTGFiZWwsIDIpOyAvLyBpbmZvTGFiZWwgc2V0IHdpdGggY29sdW1uU3BhbiA9IDJcblxuICAgY29uc3QgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuICAgY29uc3Qgc3RhY2tMYXlvdXQgPSA8U3RhY2tMYXlvdXQ+dmlldy5nZXRWaWV3QnlJZChwYWdlLCBcInN0YWNrTGF5b3V0MVwiKTtcbiAgIHN0YWNrTGF5b3V0LmFkZENoaWxkKGdyaWQpO1xuLy8gICAgcGFnZS5jb250ZW50ID0gZ3JpZDtcbn0iXX0=